<Workspace Category="Butterfly.00::Create" Description="Create an OpenFOAM Case from geometries.
-" ID="d74c1399-a760-4c39-b118-4e3ecccf5742" Name="Create Case from Geometries" Version="1.2.0.2690" X="400" Y="-100" zoom="0.5">
  <NamespaceResolutionMap/>
  <Elements>
    <Dynamo.Graph.Nodes.CodeBlockNodeModel CodeText="&quot;Butterfly&quot;;&#xA;&quot;casefromgeos_node.py&quot;;" ShouldFocus="false" guid="2da8c961-5e9a-4a61-bf1e-b36f786f459f" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="input python script" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" x="-750" y="390"/>
    <PythonNodeModels.PythonNode guid="46fcb714-aae4-48ea-9ebc-2812b3f96e7a" inputcount="2" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="import and prepare py code" type="PythonNodeModels.PythonNode" x="-355" y="385">
      <PortInfo default="false" index="0"/>
      <PortInfo default="false" index="1"/>
      <Script>
        
&quot;&quot;&quot;Find packages from Dynamo folder and prepare the code.&quot;&quot;&quot;
import clr
from System import AppDomain, Environment, IO

def tryGetPluginPath(plugin):
    &quot;&quot;&quot;Try to get path to plugin folder.&quot;&quot;&quot;
    clr.AddReference('ProtoGeometry')
    _loc = tuple(a.Location
                 for a in AppDomain.CurrentDomain.GetAssemblies()
                 if 'ProtoGeometry' in a.FullName)

    try:
        _ver = float(_loc[0].split('\\')[-2])
    except:
        _ver = float(_loc[0].split('\\')[-2].split(' ')[-1])

    assert _ver &gt;= 1.2, 'You need Dynamo 1.2 or higher to use this plugin!'

    _appdata = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)
    _dynamoPath = ('\\').join(_loc[0].split('\\')[-4:-1])
    # if the assembly is cached put Revit folder first, and then try to load it from core
    _dynamoPaths = (_dynamoPath.replace('Dynamo Core', 'Dynamo Revit'),
                    _dynamoPath.replace('Dynamo Revit', 'Dynamo Core'))
    _settingsFilename = 'DynamoSettings.xml'

    pkf = []
    for path in _dynamoPaths:
        settingsFile = IO.Path.Combine(_appdata, path, _settingsFilename)
        if IO.File.Exists(settingsFile):
            with open(settingsFile, 'rb') as outf:
                for line in outf:
                    if line.strip().startswith('&lt;CustomPackageFolders&gt;'):
                        for l in outf:
                            if l.strip().startswith('&lt;/CustomPackageFolders&gt;'):
                                break
                            else:
                                pkf.append(l.replace('&lt;/string&gt;', '').replace('&lt;string&gt;', '').strip())

    for p in pkf:
        pp = IO.Path.Combine(p, 'packages', plugin, 'extra')
        if IO.Directory.Exists(pp):
            return pp

try:
    plugin, filename = IN
    p = tryGetPluginPath(plugin)
    if not p:
        raise ImportError('{} is not installed! Install it from package manager.'.format(plugin))
    # import the file and wrap it into sys.append
    f = IO.Path.Combine(p, 'nodesrc', filename)
    with open(f, 'rb') as inf:
        source = '    '.join(inf.readlines())

    header = 'try:\n    import sys\n' + \
        '    sys.path.append(r\'{}\')\n\n'.format(p) + \
        '    sys.path.append(r\'C:\Program Files (x86)\IronPython 2.7\Lib\')\n\n' + \
        '    '

    footer = '\nexcept Exception, e:\n' + \
        '    import traceback\n' + \
        '    OUT = &quot;ERROR:\\n\\t{}&quot;.format(str(e)) + \\\n' + \
        '    &quot;\\n\\nIf you think this is a bug submit an issue on github.\\n&quot; + \\\n' + \
        '    &quot;https://github.com/ladybug-analysis-tools/honeybee-plus/issues\\n&quot; +  \\\n' + \
        '    &quot;and include below error message:\\n\\n&quot; + \\\n' + \
        '    &quot;{}&quot;.format(traceback.format_exc())\n'

    OUT = header + source + footer

except Exception, e:
    import sys
    sys.path.append(r'C:\Program Files (x86)\IronPython 2.7\Lib')
    import traceback
    OUT = &quot;ERROR:\n\t{}&quot;.format(str(e)) + \
        &quot;\n\nIf you think this is a bug submit an issue on github.\n&quot; + \
        &quot;https://github.com/ladybug-analysis-tools/honeybee-plus/issues\n&quot; +  \
        &quot;and include below error message:\n\n&quot; + \
        &quot;{}&quot;.format(traceback.format_exc())

      </Script>
    </PythonNodeModels.PythonNode>
    <PythonNodeModels.PythonStringNode guid="0eafe41b-278c-4fdd-93e0-52de13723f62" inputcount="8" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="core" type="PythonNodeModels.PythonStringNode" x="-75" y="460">
      <PortInfo default="false" index="0"/>
      <PortInfo default="false" index="1"/>
      <PortInfo default="false" index="2"/>
      <PortInfo default="false" index="3"/>
      <PortInfo default="false" index="4"/>
      <PortInfo default="false" index="5"/>
      <PortInfo default="false" index="6"/>
      <PortInfo default="false" index="7"/>
    </PythonNodeModels.PythonStringNode>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="4cbf1fd0-6456-4e6d-a809-3f92949e7530" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="_name" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" x="-750" y="475">
      <Symbol value="// Project name.&#xD;&#xA;_name: string;"/>
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="d4db2f8a-c532-4fc8-8c64-06371d2146e0" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="_BFGeometries" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" x="-750" y="570">
      <Symbol value="// List of butterfly geometries for this case.&#xD;&#xA;_BFGeometries: var[];"/>
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="d15ad4ac-87d9-49ab-8aae-7d9b3596aefb" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="refRegions_" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" x="-750" y="665">
      <Symbol value="// A list of refinement regions.&#xD;&#xA;refRegions_: var[] = {};"/>
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="4203b936-f6eb-4a42-987f-ec6bf4260791" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="make2dParams_" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" x="-750" y="760">
      <Symbol value="// Butterfly parameters to make a 2d wind tunnel.&#xD;&#xA;make2dParams_: var = null;"/>
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="bc95f2a7-f536-4c84-b0d8-6b1a3080ce5c" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="_meshParams_" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" x="-750" y="855">
      <Symbol value="// Butterfly meshing parameters. You can set-up meshing parameters&#xD;&#xA;// also on the blockMesh and snappyHexMesh components to overwrite this&#xD;&#xA;// settings. Use this input to set up the meshing parameters if you are&#xD;&#xA;// not running the meshing locally.&#xD;&#xA;_meshParams_: var = null;"/>
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="fb78963e-6f13-42fc-b99c-ce1950ed5933" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="expandBlockMesh_" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" x="-750" y="950">
      <Symbol value="// Butterfly by default expands the mesh by one cell to&#xD;&#xA;// ensure snappyHexMesh will snap to extrior surfaces. You can set the&#xD;&#xA;// expand to off or overwrite the vertices using update blockMeshDict&#xD;&#xA;// component.&#xD;&#xA;expandBlockMesh_: bool = true;"/>
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="476a42c3-5f27-4306-8a58-248648c9da7c" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="_run" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" x="-750" y="1045">
      <Symbol value="// Create case from inputs.&#xD;&#xA;_run: bool;"/>
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CodeBlockNodeModel CodeText="out[0];&#xA;out[1];" ShouldFocus="false" guid="d8d42f39-ef1c-4ca0-a5f6-74ca46c0b9e8" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="decompose outputs" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" x="150" y="515"/>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="298fb7ae-b38d-44ab-baeb-434a44b5b497" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="blockPts" type="Dynamo.Graph.Nodes.CustomNodes.Output" x="380" y="475">
      <Symbol value="// Script variable caseFromGeos&#xD;&#xA;blockPts;"/>
      <PortInfo default="false" index="0"/>
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="2c758d72-281c-4328-a104-184514063060" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="case" type="Dynamo.Graph.Nodes.CustomNodes.Output" x="380" y="570">
      <Symbol value="// Butterfly case.&#xD;&#xA;case;"/>
      <PortInfo default="false" index="0"/>
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <PythonNodeModels.PythonNode guid="976ff4af-3676-4356-bd8b-e31e36d628a9" inputcount="2" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="Error report" type="PythonNodeModels.PythonNode" x="150" y="380">
      <PortInfo default="false" index="0"/>
      <PortInfo default="false" index="1"/>
      <Script>
        
&quot;&quot;&quot;Report errors&quot;&quot;&quot;
importErr, runErr = IN
errors = []

if importErr and str(importErr).startswith(&quot;ERROR:&quot;):
    errors.append(importErr)

if runErr and str(runErr).startswith(&quot;ERROR:&quot;):
    errors.append(runErr)

if len(errors)==0:
    OUT = &quot;All good! Vvizzzz.&quot;
else:
    OUT = &quot;\n&quot;.join(errors)

      </Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="bfe51be8-6fc8-47f1-abe3-eada59671789" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="ERRReport" type="Dynamo.Graph.Nodes.CustomNodes.Output" x="380" y="380">
      <Symbol value="// Report&#xD;&#xA;ERRReport;"/>
      <PortInfo default="false" index="0"/>
    </Dynamo.Graph.Nodes.CustomNodes.Output>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel end="46fcb714-aae4-48ea-9ebc-2812b3f96e7a" end_index="0" portType="0" start="2da8c961-5e9a-4a61-bf1e-b36f786f459f" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="46fcb714-aae4-48ea-9ebc-2812b3f96e7a" end_index="1" portType="0" start="2da8c961-5e9a-4a61-bf1e-b36f786f459f" start_index="1"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="0eafe41b-278c-4fdd-93e0-52de13723f62" end_index="0" portType="0" start="46fcb714-aae4-48ea-9ebc-2812b3f96e7a" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="0eafe41b-278c-4fdd-93e0-52de13723f62" end_index="1" portType="0" start="4cbf1fd0-6456-4e6d-a809-3f92949e7530" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="0eafe41b-278c-4fdd-93e0-52de13723f62" end_index="2" portType="0" start="d4db2f8a-c532-4fc8-8c64-06371d2146e0" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="0eafe41b-278c-4fdd-93e0-52de13723f62" end_index="3" portType="0" start="d15ad4ac-87d9-49ab-8aae-7d9b3596aefb" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="0eafe41b-278c-4fdd-93e0-52de13723f62" end_index="4" portType="0" start="4203b936-f6eb-4a42-987f-ec6bf4260791" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="0eafe41b-278c-4fdd-93e0-52de13723f62" end_index="5" portType="0" start="bc95f2a7-f536-4c84-b0d8-6b1a3080ce5c" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="0eafe41b-278c-4fdd-93e0-52de13723f62" end_index="6" portType="0" start="fb78963e-6f13-42fc-b99c-ce1950ed5933" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="0eafe41b-278c-4fdd-93e0-52de13723f62" end_index="7" portType="0" start="476a42c3-5f27-4306-8a58-248648c9da7c" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="d8d42f39-ef1c-4ca0-a5f6-74ca46c0b9e8" end_index="0" portType="0" start="0eafe41b-278c-4fdd-93e0-52de13723f62" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="298fb7ae-b38d-44ab-baeb-434a44b5b497" end_index="0" portType="0" start="d8d42f39-ef1c-4ca0-a5f6-74ca46c0b9e8" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="2c758d72-281c-4328-a104-184514063060" end_index="0" portType="0" start="d8d42f39-ef1c-4ca0-a5f6-74ca46c0b9e8" start_index="1"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="976ff4af-3676-4356-bd8b-e31e36d628a9" end_index="0" portType="0" start="46fcb714-aae4-48ea-9ebc-2812b3f96e7a" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="976ff4af-3676-4356-bd8b-e31e36d628a9" end_index="1" portType="0" start="0eafe41b-278c-4fdd-93e0-52de13723f62" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="bfe51be8-6fc8-47f1-abe3-eada59671789" end_index="0" portType="0" start="976ff4af-3676-4356-bd8b-e31e36d628a9" start_index="0"/>
  </Connectors>
  <Notes/>
  <Annotations/>
  <Presets/>
  <Cameras>
    <Camera Name="Background Preview" eyeX="-34.00" eyeY="-34.00" eyeZ="21.19" lookX="-14.19" lookY="-43.06" lookZ="-41.65" upX="-0.17" upY="0.85" upZ="-0.50"/>
  </Cameras>
</Workspace>
